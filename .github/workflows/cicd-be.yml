name: CI/CD para Back-End na EC2 p√∫blica e privada

on:
  push:
    branches:
      - main # O branch que acionar√° o deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tech4good
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:

      # 1. Checkout do c√≥digo
      - name: Checkout do Reposit√≥rio
        uses: actions/checkout@v4

       # 2. Configura√ß√£o do ambiente Java/Maven
      - name: BE - Configurar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto' # ou a distribui√ß√£o que preferir
          java-version: '21'
          cache: 'maven' # Configura cache do Maven para acelerar builds futuros
      

      # 3. Execu√ß√£o dos testes automatizados do projeto
      - name: BE - Executar Testes automatizados
        run: mvn clean test      
        working-directory: ./Tech4Good_API

      # 4. Gera√ß√£o do .jar
      - name: BE - Gerar Artefato .JAR
        run: mvn package -DskipTests=true # -DskipTests=true pq os testes foram executados no passo anterior
        working-directory: ./Tech4Good_API

      # 5. Dando o mesmo nome sempre ao .jar
      - name: BE - Renomear JAR para app.jar # ou o nome que preferir parta o jar
        run: |
          # Encontra o primeiro (e √∫nico) arquivo .jar gerado na pasta 'target'
          # e o renomeia para o nome fixo.
          # O comando 'ls target/*.jar' retorna o nome original.
          
          JAR_NAME=$(ls target/*.jar)
          
          # Renomeia o arquivo.
          mv $JAR_NAME target/app.jar
          
          echo "Renomeado para: target/app.jar"
        working-directory: ./Tech4Good_API

      # 6. Preparar diret√≥rio na Web1
      - name: BE - Preparar diret√≥rio backend na Web1
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Remove arquivo ou diret√≥rio antigo
            rm -rf /home/${{ secrets.REMOTE_USER }}/backend
            # Cria diret√≥rio limpo
            mkdir -p /home/${{ secrets.REMOTE_USER }}/backend
            echo "‚úÖ Diret√≥rio /home/${{ secrets.REMOTE_USER }}/backend preparado"

      # 7. Deploy (Transfer√™ncia de arquivos e execu√ß√£o de comandos remotos)
      - name: BE - Copiar arquivos e Deploy (Usando SSH com rsync)
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /home/${{ secrets.REMOTE_USER }}/backend/
          # ARGS para rsync: -rltgoDzvO para c√≥pia recursiva, compress√£o e outros
          ARGS: "-rltgoDzvO" 
          # SOURCE: O que ser√° copiado. Apenas o .jar gerado no build
          SOURCE: './Tech4Good_API/target/'
          

      # 8. Fazendo o envio do jar da ec2 p√∫blica para a privada
      - name: BE - Executar Comando Shell na EC2
        uses: appleboy/ssh-action@v1.0.3 # Action popular para SSH
        with:
          host: ${{ secrets.REMOTE_HOST }} 
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}  

          # O Comando ou Script a ser Executado no EC2
          # Use o pipe '|' para comandos de m√∫ltiplas linhas
          script: |
            set -e
            
            echo "=========================================="
            echo "üöÄ Iniciando deploy do backend na EC2 privada"
            echo "=========================================="
            
            # criando um .pem tempor√°rio, baseado no secret do github
            ARQUIVO_PEM="/home/${{ secrets.REMOTE_USER }}/chavetmp.pem"
            echo "üìù Criando arquivo PEM tempor√°rio: $ARQUIVO_PEM"

            # excluindo o arquivo .pem, caso exista
            rm -f $ARQUIVO_PEM
            echo "‚úÖ Arquivo .pem anterior removido (se existia)"
            
            echo "${{ secrets.EC2_SSH_KEY }}" > $ARQUIVO_PEM || true
            chmod 400 $ARQUIVO_PEM || true
            
            # Verificar se o arquivo foi criado
            if [ ! -f "$ARQUIVO_PEM" ]; then
              echo "‚ùå ERRO: Arquivo PEM n√£o foi criado!"
              exit 1
            fi
            echo "‚úÖ Arquivo PEM criado com permiss√µes corretas"
            
            # Verificar tamanho do arquivo (debug)
            ls -lh $ARQUIVO_PEM

            # usuario e ip de destino
            USUARIO_IP=${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_PRIVADO }}
            echo "üåê Target: $USUARIO_IP"
            echo ""
            
            echo "üîç Testando conectividade com a inst√¢ncia privada..."
            # Testar conex√£o SSH com timeout de 30 segundos
            if ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'echo "‚úÖ Conex√£o SSH estabelecida com sucesso!"'; then
              echo "‚úÖ Conectividade OK"
            else
              echo "‚ùå ERRO: N√£o foi poss√≠vel conectar √† inst√¢ncia privada"
              echo "   Verifique:"
              echo "   1. Security Group permite SSH do web_sg"
              echo "   2. Inst√¢ncia privada est√° rodando"
              echo "   3. Chave SSH est√° configurada no authorized_keys"
              exit 1
            fi
            echo ""

            # Garante que o diret√≥rio existe na EC2 privada
            echo "üìÅ Criando diret√≥rio /usr/share/api/ na inst√¢ncia privada..."
            ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo mkdir -p /usr/share/api/'

            echo "‚úÖ Diret√≥rio criado"
            echo ""
            
            # Envia o .jar para o home do usu√°rio
            echo "üì¶ Transferindo app.jar para a inst√¢ncia privada..."
            echo "   Origem: /home/${{ secrets.REMOTE_USER }}/backend/app.jar"
            echo "   Destino: /home/ubuntu/app.jar"
            
            if scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM /home/${{ secrets.REMOTE_USER }}/backend/app.jar $USUARIO_IP:/home/ubuntu/app.jar; then
              echo "‚úÖ Arquivo transferido com sucesso"
            else
              echo "‚ùå ERRO: Falha ao transferir o arquivo JAR"
              exit 1
            fi
            echo ""

            # Move com sudo para o destino final
            echo "üìÇ Movendo JAR para /usr/share/api/..."
            ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo mv /home/ubuntu/app.jar /usr/share/api/app.jar && sudo chown root:root /usr/share/api/app.jar'
            echo "‚úÖ JAR movido para /usr/share/api/app.jar"
            echo ""

            # Para o container da API (se estiver rodando)
            echo "üõë Parando container da API..."
            ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker stop api-spring || true'
            echo "‚úÖ Container parado"
            echo ""

            # Remove o container antigo (for√ßa recria√ß√£o)
            echo "üóëÔ∏è  Removendo container antigo..."
            ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker rm api-spring || true'
            echo "‚úÖ Container removido"
            echo ""

            # Sobe o container da API novamente (garante que pegue o novo JAR)
            echo "üöÄ Iniciando container da API com o novo JAR..."
            ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker run -d --name api-spring --restart unless-stopped -v /usr/share/api:/usr/share/api -p 8080:8080 --network tech4good-network -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/tech4good -e SPRING_DATASOURCE_USERNAME=tech4good -e SPRING_DATASOURCE_PASSWORD=tech4good123 amazoncorretto:21 sh -c "java -jar /usr/share/api/app.jar"'
            echo "‚úÖ Container iniciado"
            echo ""

            # Aguarda container inicializar
            echo "‚è≥ Aguardando 5 segundos para o container inicializar..."
            sleep 5
            
            # Verifica se o container est√° rodando
            echo "üîç Verificando se o container est√° rodando..."
            if ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker ps | grep api-spring'; then
              echo "‚úÖ Container est√° rodando!"
            else
              echo "‚ö†Ô∏è  Container n√£o encontrado, verificando logs..."
              ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i $ARQUIVO_PEM $USUARIO_IP 'sudo docker-compose -f /home/ubuntu/compose.yaml logs api --tail=50'
            fi
            
            echo ""
            echo "=========================================="
            echo "‚úÖ Deploy do back-end conclu√≠do com sucesso!"
            echo "=========================================="
            
            # Limpar arquivo PEM tempor√°rio por seguran√ßa
            rm -f $ARQUIVO_PEM
            echo "üßπ Arquivo PEM tempor√°rio removido"
